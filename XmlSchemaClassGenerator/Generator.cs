using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace XmlSchemaClassGenerator
{
    public class Generator
    {
        public Func<string, string> GenerateNamespaceName { get; set; }
        public Dictionary<string, string> NamespaceMapping { get; set; }
        public string OutputFolder { get; set; }
        public Action<string> Log { get; set; }

        public bool GenerateNullables
        {
            get
            {
                return PropertyModel.GenerateNullables;
            }

            set
            {
                PropertyModel.GenerateNullables = value;
            }
        }

        private XmlSchemaSet Set = new XmlSchemaSet();
        private Dictionary<XmlQualifiedName, XmlSchemaAttributeGroup> AttributeGroups;
        private Dictionary<string, NamespaceModel> Namespaces = new Dictionary<string, NamespaceModel>();
        private static XmlQualifiedName AnyType = new XmlQualifiedName("anyType", XmlSchema.Namespace);

        public void Generate(IEnumerable<string> files)
        {
            var schemas = files.Select(f => XmlSchema.Read(XmlReader.Create(f), (s, e) =>
            {
                Trace.TraceError(e.Message);
            }));

            foreach (var s in schemas)
            {
                Set.Add(s);
            }

            Set.Compile();

            BuildModel();

            var namespaces = GenerateCode();

            var provider = new Microsoft.CSharp.CSharpCodeProvider();

            foreach (var ns in namespaces)
            {
                var compileUnit = new CodeCompileUnit();
                compileUnit.Namespaces.Add(ns);

                var title = ((AssemblyTitleAttribute)Attribute.GetCustomAttribute(Assembly.GetExecutingAssembly(),
                    typeof(AssemblyTitleAttribute))).Title;
                var version = Assembly.GetExecutingAssembly().GetName().Version.ToString();

                ns.Comments.Add(new CodeCommentStatement(string.Format("This code was generated by {0} version {1}.", title, version)));

                using (StringWriter sw = new StringWriter())
                {
                    provider.GenerateCodeFromCompileUnit(compileUnit, sw, new CodeGeneratorOptions { VerbatimOrder = true, BracingStyle = "C" });
                    var s = sw.ToString().Replace("};", "}"); // remove ';' at end of automatic properties
                    var path = Path.Combine(OutputFolder, ns.Name + ".cs");
                    if (Log != null) Log(path);
                    File.WriteAllText(path, s);
                }
            }
        }

        private IEnumerable<CodeNamespace> GenerateCode()
        {
            return Namespaces.Values.Select(n => n.Generate());
        }

        private string BuildNamespace(string xmlNamespace)
        {
            if (NamespaceMapping != null && NamespaceMapping.ContainsKey(xmlNamespace)) return NamespaceMapping[xmlNamespace];
            if (GenerateNamespaceName != null) return GenerateNamespaceName(xmlNamespace);
            
            throw new Exception(string.Format("Namespace {0} not in namespace map and GenerateNamespaceName not provided.", xmlNamespace));
        }

        private static CodeDomProvider Provider = new Microsoft.CSharp.CSharpCodeProvider();
        public static string MakeValidIdentifier(string s)
        {
            return Provider.CreateValidIdentifier(Regex.Replace(s, @"\W+", "_"));
        }

        public static string ToTitleCase(string s)
        {
            if (string.IsNullOrEmpty(s)) return s;
            return MakeValidIdentifier(char.ToUpperInvariant(s[0]) + s.Substring(1));
        }

        private void BuildModel()
        {
            AttributeGroups = Set.Schemas().Cast<XmlSchema>().SelectMany(s => s.AttributeGroups.Values.Cast<XmlSchemaAttributeGroup>()).ToDictionary(g => g.QualifiedName);

            foreach (var rootElement in Set.GlobalElements.Values.Cast<XmlSchemaElement>())
            {
                var qualifiedName = rootElement.ElementSchemaType.QualifiedName;
                if (qualifiedName.IsEmpty) qualifiedName = rootElement.QualifiedName;
                var type = CreateTypeModel(rootElement.ElementSchemaType, qualifiedName);

                if (type.RootElementName != null)
                {
                    // There is already another global element with this type.
                    // Need to create an empty derived class.

                    if (!(type is ClassModel))
                        throw new Exception(string.Format("Multiple root elements for single simple type not supported: {0}.", rootElement.QualifiedName));

                    var derivedClassModel = new ClassModel
                    {
                        Name = ToTitleCase(rootElement.QualifiedName.Name),
                        Namespace = CreateNamespaceModel(rootElement.QualifiedName)
                    };

                    derivedClassModel.Documentation.AddRange(GetDocumentation(rootElement));

                    if (derivedClassModel.Namespace != null)
                        derivedClassModel.Namespace.Types[derivedClassModel.Name] = derivedClassModel;

                    TypeModel.Types[rootElement.QualifiedName] = derivedClassModel;

                    derivedClassModel.BaseClass = (ClassModel)type;
                    derivedClassModel.BaseClass.DerivedTypes.Add(derivedClassModel);

                    derivedClassModel.RootElementName = rootElement.QualifiedName;
                }
                else
                {
                    type.RootElementName = rootElement.QualifiedName;
                }
            }

            foreach (var globalType in Set.GlobalTypes.Values.Cast<XmlSchemaType>())
            {
                var type = CreateTypeModel(globalType);
            }
        }

        private TypeModel CreateTypeModel(XmlSchemaType type, XmlQualifiedName qualifiedName = null)
        {
            if (qualifiedName == null) qualifiedName = type.QualifiedName;

            TypeModel typeModel = null;
            if (!qualifiedName.IsEmpty && TypeModel.Types.TryGetValue(qualifiedName, out typeModel)) return typeModel;

            var namespaceModel = CreateNamespaceModel(qualifiedName);

            var docs = GetDocumentation(type);

            var complexType = type as XmlSchemaComplexType;
            if (complexType != null)
            {
                var classModel = new ClassModel
                {
                    Name = ToTitleCase(qualifiedName.Name),
                    Namespace = namespaceModel,
                    XmlSchemaName = qualifiedName,
                    XmlSchemaType = type,
                    IsAbstract = complexType.IsAbstract,
                    IsAnonymous = type.QualifiedName.Name == "",
                };

                classModel.Documentation.AddRange(docs);

                if (namespaceModel != null)
                {
                    namespaceModel.Types[classModel.Name] = classModel;
                }

                if (!qualifiedName.IsEmpty) TypeModel.Types[qualifiedName] = classModel;

                if (complexType.BaseXmlSchemaType != null && complexType.BaseXmlSchemaType.QualifiedName != AnyType)
                {
                    var baseModel = CreateTypeModel(complexType.BaseXmlSchemaType);
                    if (!(baseModel is ClassModel)) throw new Exception(string.Format("Derivation of class {0} from simple type not supported.", classModel.Name));
                    classModel.BaseClass = (ClassModel)baseModel;
                    classModel.BaseClass.DerivedTypes.Add(classModel);
                }

                var particle = classModel.BaseClass != null ? ((XmlSchemaComplexContentExtension)complexType.ContentModel.Content).Particle
                    : complexType.ContentTypeParticle;
                var items = GetElements(particle);

                foreach (var item in items)
                {
                    var elementQualifiedName = item.ElementSchemaType.QualifiedName;

                    if (elementQualifiedName.IsEmpty)
                    {
                        elementQualifiedName = item.QualifiedName;

                        if (elementQualifiedName.IsEmpty || elementQualifiedName.Namespace == "")
                        {
                            // inner type, have to generate a type name
                            var name = ToTitleCase(classModel.Name) + ToTitleCase(item.QualifiedName.Name);
                            elementQualifiedName = new XmlQualifiedName(name, qualifiedName.Namespace);
                            // try to avoid name clashes
                            if (NameExists(elementQualifiedName)) elementQualifiedName = new[] { "Item", "Property", "Element" }
                                .Select(s => new XmlQualifiedName(elementQualifiedName.Name + s, elementQualifiedName.Namespace))
                                .First(n => !NameExists(n));
                        }
                    }

                    var propertyName = ToTitleCase(item.QualifiedName.Name);
                    if (propertyName == classModel.Name) propertyName += "Property"; // member names cannot be the same as their enclosing type

                    var property = new PropertyModel
                    {
                        OwningType = classModel,
                        XmlSchemaName = item.QualifiedName,
                        Name = propertyName,
                        Type = CreateTypeModel(item.ElementSchemaType, elementQualifiedName),
                        IsNillable = item.IsNillable,
                        IsNullable = item.MinOccurs < 1.0m,
                        IsCollection = item.MaxOccurs > 1.0m || particle.MaxOccurs > 1.0m, // http://msdn.microsoft.com/en-us/library/vstudio/d3hx2s7e(v=vs.100).aspx
                        DefaultValue = item.DefaultValue,
                        Form = item.Form == XmlSchemaForm.None ? item.GetSchema().ElementFormDefault : item.Form,
                        XmlNamespace = item.QualifiedName.Namespace != "" && item.QualifiedName.Namespace != qualifiedName.Namespace ? item.QualifiedName.Namespace : null,
                    };

                    var itemDocs = GetDocumentation(item);
                    property.Documentation.AddRange(itemDocs);

                    property.IsDeprecated = itemDocs.Any(d => d.Text.StartsWith("DEPRECATED"));

                    classModel.Properties.Add(property);
                }

                var attributes = classModel.BaseClass != null ? ((XmlSchemaComplexContentExtension)complexType.ContentModel.Content).Attributes
                    : complexType.Attributes;
                foreach (var attribute in attributes.OfType<XmlSchemaAttribute>()
                    .Concat(attributes.OfType<XmlSchemaAttributeGroupRef>().SelectMany(r => AttributeGroups[r.RefName].Attributes.Cast<XmlSchemaAttribute>()))
                    .Where(a => a.Use != XmlSchemaUse.Prohibited))
                {
                    var attributeName = ToTitleCase(attribute.QualifiedName.Name);
                    if (attributeName == classModel.Name) attributeName += "Property"; // member names cannot be the same as their enclosing type

                    var property = new PropertyModel
                    {
                        OwningType = classModel,
                        Name = attributeName,
                        XmlSchemaName = attribute.QualifiedName,
                        Type = CreateTypeModel(attribute.AttributeSchemaType),
                        IsAttribute = true,
                        IsNullable = attribute.Use != XmlSchemaUse.Required,
                        DefaultValue = attribute.DefaultValue,
                        Form = attribute.Form == XmlSchemaForm.None ? attribute.GetSchema().AttributeFormDefault : attribute.Form,
                        XmlNamespace = attribute.QualifiedName.Namespace != "" && attribute.QualifiedName.Namespace != qualifiedName.Namespace ? attribute.QualifiedName.Namespace : null,
                    };

                    var attributeDocs = GetDocumentation(attribute);
                    property.Documentation.AddRange(attributeDocs);

                    classModel.Properties.Add(property);
                }

                return classModel;
            }

            var simpleType = type as XmlSchemaSimpleType;
            if (simpleType != null)
            {
                var restrictions = new List<RestrictionModel>();

                var typeRestriction = simpleType.Content as XmlSchemaSimpleTypeRestriction;
                if (typeRestriction != null)
                {
                    if (typeRestriction.BaseTypeName.Name == "string")
                    {
                        var enumFacets = typeRestriction.Facets.OfType<XmlSchemaEnumerationFacet>();
                        if (enumFacets.Any())
                        {
                            // we got an enum
                            var enumModel = new EnumModel
                            {
                                Name = ToTitleCase(qualifiedName.Name),
                                Namespace = namespaceModel,
                                XmlSchemaName = qualifiedName,
                                XmlSchemaType = type,
                            };

                            enumModel.Documentation.AddRange(docs);

                            foreach (var facet in enumFacets)
                            {
                                var value = new EnumValueModel
                                {
                                    Value = facet.Value
                                };

                                var valueDocs = GetDocumentation(facet);
                                value.Documentation.AddRange(valueDocs);

                                var deprecated = facet.Annotation == null ? false : facet.Annotation.Items.OfType<XmlSchemaAppInfo>()
                                    .Any(a => a.Markup.Any(m => m.Name == "annox:annotate" && m.HasChildNodes && m.FirstChild.Name == "jl:Deprecated"));
                                value.IsDeprecated = deprecated;

                                enumModel.Values.Add(value);
                            }

                            if (namespaceModel != null)
                            {
                                namespaceModel.Types[enumModel.Name] = enumModel;
                            }

                            if (!qualifiedName.IsEmpty) TypeModel.Types[qualifiedName] = enumModel;

                            return enumModel;
                        }
                    }

                    restrictions = typeRestriction.Facets.Cast<XmlSchemaFacet>().Select(f => GetRestriction(simpleType, f)).ToList();
                }

                var simpleModel = new SimpleModel
                {
                    Name = ToTitleCase(qualifiedName.Name),
                    Namespace = namespaceModel,
                    XmlSchemaName = qualifiedName,
                    XmlSchemaType = type,
                    ValueType = simpleType.Datatype.ValueType,
                };

                simpleModel.Documentation.AddRange(docs);
                simpleModel.Restrictions.AddRange(restrictions);

                if (namespaceModel != null)
                {
                    namespaceModel.Types[simpleModel.Name] = simpleModel;
                }

                if (!qualifiedName.IsEmpty) TypeModel.Types[qualifiedName] = simpleModel;

                return simpleModel;
            }

            throw new Exception(string.Format("Cannot build declaration for {0}", qualifiedName));
        }

        private NamespaceModel CreateNamespaceModel(XmlQualifiedName qualifiedName)
        {
            NamespaceModel namespaceModel = null;
            if (!qualifiedName.IsEmpty && qualifiedName.Namespace != XmlSchema.Namespace)
            {
                if (!Namespaces.TryGetValue(qualifiedName.Namespace, out namespaceModel))
                {
                    var namespaceName = BuildNamespace(qualifiedName.Namespace);
                    namespaceModel = new NamespaceModel { Name = namespaceName, XmlSchemaNamespace = qualifiedName.Namespace };
                    Namespaces[qualifiedName.Namespace] = namespaceModel;
                }
            }
            return namespaceModel;
        }

        private bool NameExists(XmlQualifiedName name)
        {
            var elements = Set.GlobalElements.Names.Cast<XmlQualifiedName>();
            var types = Set.GlobalTypes.Names.Cast<XmlQualifiedName>();
            return elements.Concat(types).Any(n => n.Namespace == name.Namespace && name.Name.Equals(n.Name, StringComparison.OrdinalIgnoreCase));
        }

        private RestrictionModel GetRestriction(XmlSchemaSimpleType type, XmlSchemaFacet facet)
        {
            if (facet is XmlSchemaMaxLengthFacet)
                return new MaxLengthRestrictionModel { Value = int.Parse(facet.Value) };
            if (facet is XmlSchemaMinLengthFacet)
                return new MinLengthRestrictionModel { Value = int.Parse(facet.Value) };
            if (facet is XmlSchemaTotalDigitsFacet)
                return new TotalDigitsRestrictionModel { Value = int.Parse(facet.Value) };
            if (facet is XmlSchemaFractionDigitsFacet)
                return new FractionDigitsRestrictionModel { Value = int.Parse(facet.Value) };

            if (facet is XmlSchemaPatternFacet)
                return new PatternRestrictionModel { Value = facet.Value };

            var valueType = type.Datatype.ValueType;

            if (facet is XmlSchemaMinInclusiveFacet)
                return new MinInclusiveRestrictionModel { Value = facet.Value, Type = valueType };
            if (facet is XmlSchemaMinExclusiveFacet)
                return new MinExclusiveRestrictionModel { Value = facet.Value, Type = valueType };
            if (facet is XmlSchemaMaxInclusiveFacet)
                return new MaxInclusiveRestrictionModel { Value = facet.Value, Type = valueType };
            if (facet is XmlSchemaMaxExclusiveFacet)
                return new MaxExclusiveRestrictionModel { Value = facet.Value, Type = valueType };

            return null;
            //throw new Exception(string.Format("Restriction {0} not supported.", facet.GetType().Name));
        }

        public IEnumerable<XmlSchemaElement> GetElements(XmlSchemaGroupBase groupBase)
        {
            foreach (var item in groupBase.Items)
            {
                foreach (var element in GetElements(item))
                    yield return element;
            }
        }

        public IEnumerable<XmlSchemaElement> GetElements(XmlSchemaObject item)
        {
            var element = item as XmlSchemaElement;
            if (element != null) yield return element;

            var groupRef = item as XmlSchemaGroupRef;
            if (groupRef != null)
                foreach (var groupRefElement in GetElements(groupRef.Particle))
                    yield return groupRefElement;

            var itemGroupBase = item as XmlSchemaGroupBase;
            if (itemGroupBase != null)
                foreach (var groupBaseElement in GetElements(itemGroupBase))
                    yield return groupBaseElement;
        }

        public List<DocumentationModel> GetDocumentation(XmlSchemaAnnotated annotated)
        {
            if (annotated.Annotation == null) return new List<DocumentationModel>();

            return annotated.Annotation.Items.OfType<XmlSchemaDocumentation>()
                .Where(d => d.Markup != null && d.Markup.Any())
                .Select(d => new DocumentationModel { Language = d.Language, Text = new XText(d.Markup.First().InnerText).ToString() })
                .Where(d => !string.IsNullOrEmpty(d.Text))
                .ToList();
        }
    }
}
